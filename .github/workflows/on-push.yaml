name: build
on:
  workflow_dispatch:
  push:

jobs:
  build-juicefs-libjfs:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [ubuntu-18.04, macos-latest]
        os: [macos-latest]
    
    steps:
      - name: Checkout Github Repository
        uses: actions/checkout@v2
      - name: Set up Golang
        uses: actions/setup-go@v2
      - name: Get JuiceFS Version
        id: jfs-version
        run: echo "::set-output name=JUICEFS_VERSION::$(make -s print_libjfs_version)"

      - name: Cache juicefs and libjfs binary linux/windows
        if: matrix.os == 'ubuntu-18.04'
        uses: actions/cache@v2
        id: jfs-cache-win-linux
        with:
          path: |
            ./juicefs/lib/libjfs.so
            ./juicefs/lib/libjfs.dll
            ./juicefs/lib/juicefs
            ./juicefs/lib/juicefs.exe
          key: ${{ matrix.os }}-jfs-binary-${{ steps.jfs-version.outputs.JUICEFS_VERSION }}
      - name: Cache juicefs and libjfs mac
        if: matrix.os == 'macos-latest'
        uses: actions/cache@v2
        id: jfs-cache-mac
        with:
          path: |
            ./juicefs/lib/libjfs.so
            ./juicefs/lib/libjfs.dll
          key: ${{ matrix.os }}-jfs-binary-${{ steps.jfs-version.outputs.JUICEFS_VERSION }}


      - name: Run build-libjfs linux and windows
        if: ${{ matrix.os == 'ubuntu-18.04' && steps.jfs-cache-win-linux.outputs.cache-hit != 'true' }}
        run: |
          make build_libjfs_so
          make build_libjfs_dll
      - name: Run build-libjfs macos
        if: ${{ matrix.os == 'macos-latest' && steps.jfs-cache-mac.outputs.cache-hit != 'true' }}
        run: |
          make build_libjfs_so

      - name: Upload windows jfs binary
        if: matrix.os == 'ubuntu-18.04'
        uses: actions/upload-artifact@v2
        with:
          name: jfs-binary-win-${{ steps.jfs-version.outputs.JUICEFS_VERSION }}
          path: |
            ./juicefs/lib/libjfs.dll
            ./juicefs/lib/juicefs.exe
          retention-days: 1
      - name: Upload linux jfs binary
        if: matrix.os == 'ubuntu-18.04'
        uses: actions/upload-artifact@v2
        with:
          name: jfs-binary-linux-${{ steps.jfs-version.outputs.JUICEFS_VERSION }}
          path: |
            ./juicefs/lib/libjfs.so
            ./juicefs/lib/juicefs
          retention-days: 1
      - name: Upload macos jfs binary
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v2
        with:
          name: jfs-binary-mac-${{ steps.jfs-version.outputs.JUICEFS_VERSION }}
          path: |
            ./juicefs/lib/libjfs.so
            ./juicefs/lib/juicefs
          retention-days: 1

  build-and-tests:
    needs: build-juicefs-libjfs
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [ubuntu-18.04, macos-latest, windows-latest]
        # python-version: [3.6, 3.7, 3.8, 3.9]
        os: [macos-latest]
        python-version: [3.6]
        include:
          # - os: ubuntu-18.04
          #   pip-path: /opt/hostedtoolcache/Python
          #   libjfs-path: /opt/hostedtoolcache/Golang
          - os: macos-latest
            os-key: mac
            pip-path: /Users/runner/hostedtoolcache/Python
            libjfs-path: /Users/runner/hostedtoolcache/Golang
          # - os: windows-latest
          #   pip-path: C:\hostedtoolcache\windows\Python
          #   libjfs-path: C:\hostedtoolcache\windows\Golang

    steps:
      - name: Checkout Github Repository
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache Pip
        id: pip-cache
        uses: actions/cache@v2
        with:
          path: ${{ matrix.pip-path }}
          key: ${{ matrix.os }}-python${{ matrix.python-version }}-pip-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements-dev.txt') }}
      - name: Install Package Dependencies
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r requirements.txt
      - name: Get JuiceFS Version
        id: jfs-version
        run: echo "::set-output name=JUICEFS_VERSION::$(make -s print_libjfs_version)"
      - name: Download jfs binary artifact Windows
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/download-artifact@v2
        with:
          name: jfs-binary-win-${{ steps.jfs-version.outputs.JUICEFS_VERSION }}
          path: ./juicefs/lib/
      - name: Download jfs binary artifact Linux/Mac
        if: ${{ matrix.os != 'windows-latest' }}
        uses: actions/download-artifact@v2
        with:
          name: jfs-binary-${{ matrix.os-key }}-${{ steps.jfs-version.outputs.JUICEFS_VERSION }}
          path: ./juicefs/lib/
      - name: Chmod to make juicefs executable linux/mac
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          chmod 755 ./juicefs/lib/juicefs
          ls -l ./juicefs/lib/juicefs

      - name: Run style-check
        if: ${{ matrix.python-version == '3.6' && matrix.os != 'windows-latest' }} 
        run: |
          make style_check
      - name: Run static-check
        if: ${{ matrix.python-version == '3.6' && matrix.os != 'windows-latest' }} 
        run: |
          make static_check
      - name: Run unit-test
        run: |
          make test
